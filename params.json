{"name":"Tock.js","tagline":"A nice Javascript count-up/countdown timer.","body":"# Tock.js\r\n\r\nA nice Javascript count-up/countdown timer.\r\n\r\nBased on [Tock](https://github.com/mrchimp/Tock) by Mr Chimp and [an idea by James Edwards](http://www.sitepoint.com/creating-accurate-timers-in-javascript/).\r\n\r\nLicense: [MIT](https://github.com/Falc/Tock.js/blob/master/LICENSE)\r\n\r\n## Features\r\n\r\n* Pure Javascript, no dependencies.\r\n* Self-correcting time based on the system clock.\r\n* Count-up/countdown.\r\n* Custom intervals and starting times.\r\n* Start, stop, resume and reset.\r\n* Callback functions on every tick and when a countdown reaches zero.\r\n\r\n## The problem with setInterval/setTimeout\r\n\r\nJavascript's iteration timers using `setInterval()` or `setTimeout()` are not realiable enough. They create a difference between the iterated time and the real time.\r\nThat difference can be compensated by using the actual time to adjust the timer.\r\n\r\nThese examples made by James Edwards illustrates the differences: http://www.sitepoint.com/examples/timeradjust/examples.html\r\n\r\n## Usage\r\n\r\n**Tock.js** is not a full widget for a website, it is a timer library. You can use it either to display the result on screen or to make things work in the backend.\r\n\r\nLet's see an example:\r\n\r\n### 1) Some HTML\r\n```html\r\n<span id=\"time\">0</span>\r\n<button id=\"start\">Start</button>\r\n<button id=\"stop\">Stop</button>\r\n<button id=\"reset\">Reset</button>\r\n```\r\n\r\n### 2) Tock instance\r\n```js\r\nvar timer = new Tock(options);\r\n```\r\n\r\nThe `options` parameter allows to customize the timer easily. All of them are optional, of course.\r\n```js\r\nvar options = {\r\n    countdown: true,\r\n    start_time: 10000\r\n    interval: 15,\r\n    on_tick: onTickFunction,\r\n    on_complete: onCompleteFunction\r\n}\r\n```\r\n\r\n#### Options\r\n\r\n* **countdown**: *boolean*\r\n  * If true, the timer will count down. Otherwise, it will count up.\r\n  * Default: false.\r\n* **start_time**: *integer*\r\n  * The starting time in milliseconds. This should be set to a number greater than 0 when `countdown` is true.\r\n  * Default: 0.\r\n* **interval**: *integer*\r\n  * The interval in milliseconds. This defines how often the timer will tick.\r\n  * Default: 0.\r\n* **on_tick**: *function*\r\n  * A callback function that will be called on every tick.\r\n  * Default: A mockup function that will suggest to set a real one.\r\n* **on_complete**: *function*\r\n  * A callback function that will be called when a countdown reaches zero.\r\n  * Default: A mockup function that will suggest to set a real one.\r\n\r\n#### Methods\r\n\r\n* **start()**\r\n  * Starts the timer.\r\n* **stop()**\r\n  * Stops the timer. It is possible to resume the timer calling `start()` again.\r\n* **reset()**\r\n  * Resets the timer to `start_time`.\r\n* **lap(format)**\r\n  * Gets the current time in milliseconds.\r\n  * The `format` parameter is optional, it is passed to the `format()` method.\r\n* **format(time, format)**\r\n  * Returns a `time` (milliseconds) in the specified `format`. (See the [Time Format](#time-format) section)\r\n\r\n#### Callback functions: on_tick() and on_complete()\r\n\r\nOn every tick (every `interval` milliseconds), `on_tick()` will be called.\r\n```js\r\nvar options = {\r\n    // some options...\r\n    on_tick: function() {\r\n        $('#time').text(timer.lap());\r\n    }\r\n}\r\n```\r\n\r\nWhen a countdown timer reaches zero, `on_complete()` will be called.\r\n```js\r\nvar options = {\r\n    // some options...\r\n    on_complete: function() {\r\n        alert(\"Countdown complete!\");\r\n    }\r\n}\r\n```\r\n\r\n### 3) Add some controls\r\n\r\nThe timer can be controlled easily with some buttons and events.\r\n\r\nStart button:\r\n```js\r\n$('#start').on('click', function() {\r\n    timer.start();\r\n});\r\n```\r\n\r\nStop button:\r\n```js\r\n$('#stop').on('click', function() {\r\n    timer.stop();\r\n});\r\n```\r\n\r\nReset button:\r\n```js\r\n$('#start').on('click', function() {\r\n    timer.reset();\r\n});\r\n```\r\n\r\nIt is possible to set a \"lap\" button too:\r\n```js\r\n$('#lap').on('click', function() {\r\n    $('#time').append('<br />' + timer.lap());\r\n});\r\n```\r\n\r\n## Time Format\r\n\r\nThe `format(time, format)` method allows to customize the `format` of the given `time` (passed as milliseconds). It will replace the placeholders found in the `format` parameter, with the corresponding time information:\r\n\r\n* **{H}**: Hours\r\n* **{h}**: Hours (same as `{H}`)\r\n* **{M}**: Minutes\r\n* **{m}**: Minutes (0 - 59)\r\n* **{S}**: Seconds\r\n* **{s}**: Seconds (0 - 59)\r\n* **{L}**: Milliseconds (Default)\r\n* **{l}**: Milliseconds (0 - 999)\r\n\r\nCapital letters are raw values. This means that `{M}` displays the full number of minutes (i.e. 127 minutes), but `{m}` displays only the number of minutes elapsed since the last hour (7 in 127).\r\n\r\nDouble letters are used to retrieve the time with leading zeros. If `{m}` returns **7**, `{mm}` will return **07**.\r\n\r\nExamples:\r\n```php\r\n    Time: 3877012 (1 hour, 4 minutes, 37 seconds and 12 milliseconds)\r\n    '{hh}:{mm}:{ss}.{ll}'        // 01:04:37.012\r\n    '{MM}'                       // 64\r\n    '{SS}.{ll}'                  // 3877.012\r\n    '{MM} min and {ss} s'        // 64 min and 37 s\r\n    '{h}:{m} vs {hh}:{mm}'       // 1:4 vs 01:04\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}